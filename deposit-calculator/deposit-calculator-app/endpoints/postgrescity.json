{
	"swagger": "2.0",
	"info": {
		"title": "postgres/city",
		"description": "The postgres/city REST API",
		"version": "1.0.0"
	},
	"basePath": "/endpoints",
	"paths": {
		"/city": {
			"post": {
				"responses": {
					"201": {
						"description": "The create succeeded."
					},
					"400": {
						"description": "Bad request."
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Create a postgres/city",
				"operationId": "Create postgres/city",
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Create body",
						"schema": {
							"$ref": "schema:///model/postgres%2Fcity"
						}
					}
				],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-create"
			},
			"delete": {
				"responses": {
					"204": {
						"description": "The delete succeeded."
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Deletes all postgres/citys",
				"operationId": "Delete All postgres/city",
				"consumes": [],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-deleteAll"
			},
			"get": {
				"responses": {
					"200": {
						"description": "The find all succeeded, and the results are available.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "schema:///model/postgres%2Fcity"
							}
						}
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Find all postgres/city",
				"operationId": "Find All postgres/city",
				"consumes": [],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-findAll"
			}
		},
		"/city/distinct/{field}": {
			"get": {
				"responses": {
					"200": {
						"description": "Distinct fields response",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"uniqueItems": true
						}
					},
					"400": {
						"description": "Bad request."
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Find distinct postgres/city",
				"operationId": "Distinct postgres/city",
				"consumes": [],
				"parameters": [
					{
						"in": "path",
						"name": "field",
						"description": "The field name that must be distinct.",
						"required": true,
						"type": "string"
					},
					{
						"in": "query",
						"name": "limit",
						"description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
						"required": false,
						"type": "number",
						"minimum": 0,
						"maximum": 1000
					},
					{
						"in": "query",
						"name": "skip",
						"description": "The number of records to skip. The value must not be less than 0.",
						"required": false,
						"type": "number",
						"minimum": 0
					},
					{
						"in": "query",
						"name": "where",
						"description": "Constrains values for fields. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					},
					{
						"in": "query",
						"name": "order",
						"description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					}
				],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-distinct"
			}
		},
		"/city/count": {
			"get": {
				"responses": {
					"200": {
						"description": "The count succeeded, and the results are available.",
						"schema": {
							"type": "integer"
						}
					},
					"400": {
						"description": "Bad request."
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Count a postgres/city",
				"operationId": "Count postgres/city",
				"consumes": [],
				"parameters": [
					{
						"in": "query",
						"name": "where",
						"description": "Constrains values for fields. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					}
				],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-count"
			}
		},
		"/city/query": {
			"get": {
				"responses": {
					"200": {
						"description": "The query succeeded, and the results are available.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "schema:///model/postgres%2Fcity"
							}
						}
					},
					"400": {
						"description": "Bad request."
					},
					"404": {
						"description": "No results were found."
					},
					"500": {
						"description": "Something went wrong during the request; check out the logs on your server."
					}
				},
				"description": "Query a postgres/city",
				"operationId": "Query postgres/city",
				"consumes": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"description": "The number of records to fetch. The value must be greater than 0, and no greater than 1000.",
						"required": false,
						"type": "number",
						"minimum": 0,
						"maximum": 1000
					},
					{
						"in": "query",
						"name": "skip",
						"description": "The number of records to skip. The value must not be less than 0.",
						"required": false,
						"type": "number",
						"minimum": 0
					},
					{
						"in": "query",
						"name": "where",
						"description": "Constrains values for fields. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					},
					{
						"in": "query",
						"name": "order",
						"description": "A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					},
					{
						"in": "query",
						"name": "sel",
						"description": "Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					},
					{
						"in": "query",
						"name": "unsel",
						"description": "Selects which fields to not return from the query. Others are included. The value should be encoded JSON.",
						"required": false,
						"type": "string",
						"format": "json"
					}
				],
				"produces": [
					"application/json"
				],
				"tags": [
					"postgres/city"
				],
				"x-flow": "postgrescity-query"
			}
		}
	}
}